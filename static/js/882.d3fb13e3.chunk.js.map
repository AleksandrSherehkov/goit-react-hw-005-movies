{"version":3,"file":"static/js/882.d3fb13e3.chunk.js","mappings":"kNAGaA,EAAY,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAC5D,OACE,iCACE,uBAAIH,GAAgB,2BACpB,gBACEI,IAAKH,EAAW,0CAAsCA,GAAgBI,EACtEC,IAAKN,KAEP,4BACE,yBAAG,kBACa,0BAAOE,QAEvB,yBAAG,eACU,4BAAM,IAAEC,aAK5B,E,6BCjBYI,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAOC,GAAV,mBACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,UACE,SAACV,GAAD,UAAec,OAFVD,EADC,KASjB,C,wHCfYK,EAAa,WACxB,OAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAcA,OACE,SAAC,KAAD,CACEC,cAdkB,CACpBC,YAAa,IAcXC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAIhB,OAHKD,EAAOF,cACVG,EAAOH,YAAc,+BAEhBG,CACR,EACDC,SAlBiB,SAACF,EAAD,GAA4B,IAAjBG,EAAgB,EAAhBA,UACtBL,EAAgBE,EAAhBF,YACFM,EAAQN,EAAYO,OAC1BT,EAAgBE,EAAc,CAAEM,MAAAA,GAAU,CAAC,GAE3CD,GACD,EAGC,UAWE,UAAC,KAAD,CAAMG,aAAa,MAAnB,WACE,mBAAQC,KAAK,SAAb,UACE,0BAAM,cAER,SAAC,KAAD,CAAOA,KAAK,OAAOC,KAAK,cAAcC,YAAY,2BAA2BC,WAAS,KACtF,SAAC,KAAD,CAAcF,KAAK,cAAcG,UAAU,MAAMC,UAAU,cAIlE,E,wCCPD,EAvBmB,WAAO,IAAD,EACvB,GAAuBjB,EAAAA,EAAAA,MAEjBS,EAAK,WAFX,eAE2BS,IAAI,gBAApB,QAAgC,GAE3C,GAAsCC,EAAAA,EAAAA,GAASC,EAAAA,GAAkBX,GAAjE,eAASY,EAAT,KAASA,QAAWC,EAApB,KAEA,OAFA,MAGS,SAACC,EAAA,EAAD,IAGLD,GACK,SAACE,EAAA,EAAD,CAAgBF,MAAOA,KAI9B,iCACE,SAACvB,EAAD,IACCsB,IAAW,SAAChC,EAAA,EAAD,CAAYC,OAAQ+B,MAGrC,C","sources":["components/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.jsx","components/FormSearch/FormSearch.jsx","page/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport posterBg from 'services/poster1.jpg';\n\nexport const MovieItem = ({ title, poster_path, vote_average, vote_count }) => {\n  return (\n    <>\n      <p>{title ? title : 'Movie without a title'}</p>\n      <img\n        src={poster_path ? `https://image.tmdb.org/t/p/w500/${poster_path}` : posterBg}\n        alt={title}\n      />\n      <div>\n        <p>\n          Vote average: <span>{vote_average}</span>\n        </p>\n        <p>\n          Vote count:<span> {vote_count}</span>\n        </p>\n      </div>\n    </>\n  );\n};\n\nMovieItem.propTypes = {\n  poster_path: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n  vote_count: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, ...movieData }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MovieItem {...movieData} />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number.isRequired,\n      vote_count: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const FormSearch = () => {\n  const [, setSearchParams] = useSearchParams();\n\n  const initialValues = {\n    searchInput: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { searchInput } = values;\n    const query = searchInput.trim();\n    setSearchParams(searchInput ? { query } : {});\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={values => {\n        const errors = {};\n        if (!values.searchInput) {\n          errors.searchInput = 'Please enter a search query';\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n        <Field type=\"text\" name=\"searchInput\" placeholder=\"Search images and photos\" autoFocus />\n        <ErrorMessage name=\"searchInput\" component=\"div\" className=\"error\" />\n      </Form>\n    </Formik>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nimport { ErrorIndicator } from 'components/ErrorIndicator/ErrorIndicator';\nimport { FormSearch } from 'components/FormSearch/FormSearch';\nimport { LoadingIndicator } from 'components/LoadingIndicator/LoadingIndicator';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useFetch } from 'hook/useFetch';\nimport { getMoviesByQuery } from 'services/api/movieApi';\n\nconst MoviesPage = () => {\n  const [searchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n\n  const [{ results }, error, loading] = useFetch(getMoviesByQuery, query);\n\n  if (loading) {\n    return <LoadingIndicator />;\n  }\n\n  if (error) {\n    return <ErrorIndicator error={error} />;\n  }\n\n  return (\n    <>\n      <FormSearch />\n      {results && <MoviesList movies={results} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["MovieItem","title","poster_path","vote_average","vote_count","src","posterBg","alt","MoviesList","movies","location","useLocation","map","id","movieData","to","state","from","FormSearch","useSearchParams","setSearchParams","initialValues","searchInput","validate","values","errors","onSubmit","resetForm","query","trim","autoComplete","type","name","placeholder","autoFocus","component","className","get","useFetch","getMoviesByQuery","results","error","LoadingIndicator","ErrorIndicator"],"sourceRoot":""}