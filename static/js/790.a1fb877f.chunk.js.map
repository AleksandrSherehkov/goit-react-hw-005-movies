{"version":3,"file":"static/js/790.a1fb877f.chunk.js","mappings":"wOAEaA,EAAQC,EAAAA,GAAAA,EAAH,6NAWLC,EAASD,EAAAA,GAAAA,IAAH,yCAGNE,EAAcF,EAAAA,GAAAA,IAAH,iMAQXG,EAAQH,EAAAA,GAAAA,KAAH,gE,SCpBLI,EAAY,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAC5D,OACE,iCACE,SAACT,EAAD,UAAQM,GAAgB,2BACxB,SAACJ,EAAD,CACEQ,IAAKH,EAAW,0CAAsCA,GAAgBI,EACtEC,IAAKN,KAEP,UAACH,EAAD,YACE,yBAAG,kBACa,SAACC,EAAD,UAAQI,EAAaK,QAAQ,SAE7C,yBAAG,eACU,UAACT,EAAD,WAAO,IAAEK,aAK7B,E,oBCpBYK,EAAab,EAAAA,GAAAA,GAAH,qJASVc,EAAOd,EAAAA,GAAAA,GAAH,sE,SCNJe,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACL,EAAD,UACGG,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAOC,GAAV,mBACV,SAACP,EAAD,WACE,SAAC,KAAD,CAAMQ,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,UACE,SAACb,GAAD,UAAeiB,OAFRD,EADD,KASjB,C,mJCfYK,GAAazB,EAAAA,EAAAA,IAAO0B,EAAAA,GAAP1B,CAAH,mHAOV2B,GAAc3B,EAAAA,EAAAA,IAAO4B,EAAAA,GAAP5B,CAAH,2JAWX6B,EAAe7B,EAAAA,GAAAA,OAAH,yOAgBZ8B,GAAc9B,EAAAA,EAAAA,IAAO+B,EAAAA,GAAP/B,CAAH,iJ,SCjCXgC,EAAa,WACxB,OAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAcA,OACE,SAAC,KAAD,CACEC,cAdkB,CACpBC,YAAa,IAcXC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAIhB,OAHKD,EAAOF,cACVG,EAAOH,YAAc,+BAEhBG,CACR,EACDC,SAlBiB,SAACF,EAAD,GAA4B,IAAjBG,EAAgB,EAAhBA,UACtBL,EAAgBE,EAAhBF,YACFM,EAAQN,EAAYO,OAC1BT,EAAgBE,EAAc,CAAEM,MAAAA,GAAU,CAAC,GAE3CD,GACD,EAGC,UAWE,UAAChB,EAAD,CAAYmB,aAAa,MAAzB,WACE,SAACjB,EAAD,CACEkB,KAAK,OACLC,KAAK,cACLC,YAAY,2BACZC,WAAS,KAEX,SAACnB,EAAD,CAAcgB,KAAK,SAAnB,UACE,SAAC,MAAD,OAEF,SAACf,EAAD,CAAagB,KAAK,cAAcG,UAAU,MAAMC,UAAU,cAIjE,E,wCCdD,EAvBmB,WAAO,IAAD,EACvB,GAAuBjB,EAAAA,EAAAA,MAEjBS,EAAK,WAFX,eAE2BS,IAAI,gBAApB,QAAgC,GAE3C,GAAsCC,EAAAA,EAAAA,GAASC,EAAAA,GAAkBX,GAAjE,eAASY,EAAT,KAASA,QAAWC,EAApB,KAEA,OAFA,MAGS,SAACC,EAAA,EAAD,IAGLD,GACK,SAACE,EAAA,EAAD,CAAgBF,MAAOA,KAI9B,iCACE,SAACvB,EAAD,IACCsB,IAAW,SAACvC,EAAA,EAAD,CAAYC,OAAQsC,MAGrC,C","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/FormSearch/FormSearch.styled.js","components/FormSearch/FormSearch.jsx","page/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.p`\n  display: grid;\n  place-items: center;\n  height: 40px;\n  width: 250px;\n  font-weight: bold;\n  text-shadow: 0px 3px 3px rgba(255, 255, 255, 0.5);\n  color: #504e61;\n  align-items: 'center';\n`;\n\nexport const Poster = styled.img`\n  width: 250px;\n`;\nexport const VoteWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n  font-size: 14px;\n  font-weight: bold;\n  text-shadow: 0px 3px 3px rgba(255, 255, 255, 0.5);\n`;\nexport const Value = styled.span`\n  font-weight: 700;\n  color: #e62600;\n`;\n","import PropTypes from 'prop-types';\nimport posterBg from 'services/poster1.jpg';\nimport { Poster, Title, Value, VoteWrapper } from './MovieItem.styled';\n\nexport const MovieItem = ({ title, poster_path, vote_average, vote_count }) => {\n  return (\n    <>\n      <Title>{title ? title : 'Movie without a title'}</Title>\n      <Poster\n        src={poster_path ? `https://image.tmdb.org/t/p/w500/${poster_path}` : posterBg}\n        alt={title}\n      />\n      <VoteWrapper>\n        <p>\n          Vote average: <Value>{vote_average.toFixed(1)}</Value>\n        </p>\n        <p>\n          Vote count:<Value> {vote_count}</Value>\n        </p>\n      </VoteWrapper>\n    </>\n  );\n};\n\nMovieItem.propTypes = {\n  poster_path: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n  vote_count: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const WraperList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 40px;\n  margin-bottom: 20px;\n  margin-top: 20px;\n`;\n\nexport const Card = styled.li`\n  display: flex;\n  justify-content: center;\n`;\n","import PropTypes from 'prop-types';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Card, WraperList } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <WraperList>\n      {movies.map(({ id, ...movieData }) => (\n        <Card key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MovieItem {...movieData} />\n          </Link>\n        </Card>\n      ))}\n    </WraperList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number.isRequired,\n      vote_count: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import { ErrorMessage, Field, Form } from 'formik';\n\nimport styled from 'styled-components';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n`;\n\nexport const FieldStyled = styled(Field)`\n  width: 100%;\n  height: 30px;\n  margin: 0 auto;\n\n  padding: 0 10px 0 10px;\n\n  border: 1px solid #c3d9d5;\n  outline: none;\n`;\n\nexport const ButtonSubmit = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 150px;\n  height: 30px;\n\n  border: 1px solid #c3d9d5;\n\n  cursor: pointer;\n  :hover {\n    background-color: #c3d9d5;\n  }\n`;\n\nexport const ErrorStyled = styled(ErrorMessage)`\n  display: flex;\n  color: red;\n  text-shadow: -1px -1px 1px rgba(255, 255, 255, 0.1), 1px 1px 1px rgba(0, 0, 0, 0.5);\n`;\n","import { Formik } from 'formik';\nimport { FcSearch } from 'react-icons/fc';\nimport { useSearchParams } from 'react-router-dom';\nimport { ButtonSubmit, ErrorStyled, FieldStyled, FormStyled } from './FormSearch.styled';\n\nexport const FormSearch = () => {\n  const [, setSearchParams] = useSearchParams();\n\n  const initialValues = {\n    searchInput: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { searchInput } = values;\n    const query = searchInput.trim();\n    setSearchParams(searchInput ? { query } : {});\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={values => {\n        const errors = {};\n        if (!values.searchInput) {\n          errors.searchInput = 'Please enter a search query';\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled autoComplete=\"off\">\n        <FieldStyled\n          type=\"text\"\n          name=\"searchInput\"\n          placeholder=\"Search images and photos\"\n          autoFocus\n        />\n        <ButtonSubmit type=\"submit\">\n          <FcSearch />\n        </ButtonSubmit>\n        <ErrorStyled name=\"searchInput\" component=\"div\" className=\"error\" />\n      </FormStyled>\n    </Formik>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nimport { ErrorIndicator } from 'components/ErrorIndicator/ErrorIndicator';\nimport { FormSearch } from 'components/FormSearch/FormSearch';\nimport { LoadingIndicator } from 'components/LoadingIndicator/LoadingIndicator';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useFetch } from 'hook/useFetch';\nimport { getMoviesByQuery } from 'services/api/movieApi';\n\nconst MoviesPage = () => {\n  const [searchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n\n  const [{ results }, error, loading] = useFetch(getMoviesByQuery, query);\n\n  if (loading) {\n    return <LoadingIndicator />;\n  }\n\n  if (error) {\n    return <ErrorIndicator error={error} />;\n  }\n\n  return (\n    <>\n      <FormSearch />\n      {results && <MoviesList movies={results} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["Title","styled","Poster","VoteWrapper","Value","MovieItem","title","poster_path","vote_average","vote_count","src","posterBg","alt","toFixed","WraperList","Card","MoviesList","movies","location","useLocation","map","id","movieData","to","state","from","FormStyled","Form","FieldStyled","Field","ButtonSubmit","ErrorStyled","ErrorMessage","FormSearch","useSearchParams","setSearchParams","initialValues","searchInput","validate","values","errors","onSubmit","resetForm","query","trim","autoComplete","type","name","placeholder","autoFocus","component","className","get","useFetch","getMoviesByQuery","results","error","LoadingIndicator","ErrorIndicator"],"sourceRoot":""}